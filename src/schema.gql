# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CheckIn {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  ticketId: String!
  gateId: String!
  price: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Gate {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gateNumber: String!
  terminalId: String!
  terminals: Terminal!
  terminal: Terminal!
  airport: Airport!
}

type Terminal {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  airportId: Airport!
  airport: Airport
  gates(page: Int, limit: Int): [Gate!]
}

type Location {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String
  airportId: String
  airlineId: String
  city: String!
  country: String!
  currency: Currency!
}

enum Currency {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GGP
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  IMP
  INR
  IQD
  IRR
  ISK
  JEP
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VES
  VND
  VUV
  WST
  XAF
  XCD
  XOF
  XPF
  YER
  ZAR
  ZMW
  ZWL
}

type Airport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  iataCode: String!
  icaoCode: String!
  employees(page: Int, limit: Int): EmployeesResponse!
  terminals(page: Int, limit: Int): [Terminal!]!
  gates: [GateData!]!
  location: Location!
}

type Employee {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  airportId: Airport!
}

type Flight {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  flightNumber: String!
  airlineId: String!
  leaveAt: DateTime!
  arriveAt: DateTime!
  status: FlightStatus!
  gate: Gate!
  fromAirport: Airport!
  toAirport: Airport!
}

enum FlightStatus {
  SCHEDULED
  DELAYED
  CANCELLED
  IN_AIR
  LANDED
}

type Ticket {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  passengerId: String!
  flightId: String!
  seatId: String!
  seatNumber: Int!
  class: TicketClass!
  price: Int!
  status: TicketStatus!
}

enum TicketClass {
  ECONOMY
  BUSINESS
  FIRST
}

enum TicketStatus {
  BOOKED
  CANCELED
  USED
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String
  avatar: String
  phone: String!
  email: String!
  role: Role!
  fcmToken: String!
}

"""User roles in the system"""
enum Role {
  PASSENGER
  ADMIN
  MANAGER
  PILOT
  SECURITY
  GROUND_STAFF
  AIRLINE_MANAGER
  FLIGHT_ATTENDANT
}

type airline {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  user: User!
}

type UserOutput {
  id: String!
  passengerId: String!
  firstName: String!
  lastName: String!
  fullName: String!
  fcmToken: String!
  phone: String!
  email: String!
  passportNumber: Int!
  nationality: String!
  dateOfBirth: DateTime!
}

type UserResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: UserOutput
}

type AuthOutPut {
  user: UserOutput!
  token: String!
}

type AuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AuthOutPut
}

type PaginationInfo {
  totalPages: Int!
  currentPage: Int!
  totalItems: Int!
}

type EmployeeOutput {
  id: String!
  firstName: String!
  lastName: String!
  fullName: String!
  phone: String!
  email: String!
  airportId: String!
  userId: String!
  role: Role!
  location: Location!
  airport: Airport!
}

type EmployeeResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: EmployeeOutput
}

type EmployeesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [EmployeeOutput!]
  pagination: PaginationInfo
}

type AdminAuthOutPut {
  user: EmployeeOutput!
  token: String!
}

type AdminAuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AdminAuthOutPut
}

type TerminalResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Terminal
}

type TerminalsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Terminal!]
  pagination: PaginationInfo
}

type AirportsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Airport!]
  pagination: PaginationInfo
}

type AirportResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Airport
}

type GateData {
  id: String!
  gateNumber: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  terminal: Terminal!
}

type GateDataResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: GateData
}

type GateResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Gate
}

type GatesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Gate!]
  pagination: PaginationInfo
}

type LocationResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Location
}

type AirportLocation {
  id: String!
  country: String!
  city: String!
  currency: Currency!
  airport: Airport!
}

type AirportLocationsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [AirportLocation!]
  pagination: PaginationInfo
}

type AirlineLocation {
  id: String!
  country: String!
  city: String!
  currency: Currency!
  airline: airline!
}

type AirlineLocationsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [AirlineLocation!]
  pagination: PaginationInfo
}

type FlightOutput {
  id: String!
  flightNumber: String!
  fromAirport: Airport!
  toAirport: Airport!
  airline: airline!
  gate: Gate!
  status: FlightStatus!
  leaveAt: DateTime!
  arriveAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FlightResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: FlightOutput
}

type FromAirportFlightOutput {
  id: String!
  flightNumber: String!
  toAirport: Airport!
  gate: Gate!
  status: FlightStatus!
  leaveAt: DateTime!
  arriveAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FlightsFromAirportResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [FromAirportFlightOutput!]
  pagination: PaginationInfo
}

type ToAirportFlightOutput {
  id: String!
  flightNumber: String!
  fromAirport: Airport!
  gate: Gate!
  status: FlightStatus!
  leaveAt: DateTime!
  arriveAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FlightsToAirportResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [ToAirportFlightOutput!]
  pagination: PaginationInfo
}

type Seat {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  flightId: String!
  seatNumber: Int!
  class: TicketClass!
  isAvailable: Boolean!
  flight: FlightResponse!
}

type SeatResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Seat
}

type SeatsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Seat!]
  pagination: PaginationInfo
}

type TicketResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Ticket
}

type TicketsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Ticket!]
  pagination: PaginationInfo
}

type CheckinInput {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  id: String!
  price: Int!
  ticket: Ticket!
  gate: Gate!
}

type CheckinResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: CheckinInput
}

type CheckinsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [CheckIn!]
  pagination: PaginationInfo
}

type CreateCheckinResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: String
}

type BaggageData {
  id: String!
  limit: Int!
  weight: Int!
  ticket: Ticket!
}

type BaggageResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: BaggageData
}

type BaggagesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [BaggageData!]
  pagination: PaginationInfo
}

type AirlineResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: airline
}

type AirlinesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [airline!]
  pagination: PaginationInfo
}

type FlightsInAirlinesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Flight!]
  pagination: PaginationInfo
}

type FlightCrewData {
  id: String!
  flight: Flight!
  user: User!
  role: CrewRole!
}

enum CrewRole {
  CREW
  PILOT
  SECURITY
  FLIGHT_ATTENDANT
}

type FlightCrewResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: FlightCrewData
}

type FllghtCrewsData {
  id: String!
  user: User!
  role: CrewRole!
}

type FllghtCrewsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [FllghtCrewsData!]
  pagination: PaginationInfo
}

type Query {
  sayHello: String!
  getUserById(id: String!): UserResponse!
  getUserByEmail(email: String!): UserResponse!
  getUserByPhone(phone: String!): UserResponse!
  findLocationById(id: String!): LocationResponse!
  findAirportLocations(page: Int, limit: Int): AirportLocationsResponse!
  findAirlineLocations(page: Int, limit: Int): AirlineLocationsResponse!
  airportById(id: String!): AirportResponse!
  airportByName(name: String!): AirportResponse!
  allAirports(page: Int, limit: Int): AirportsResponse!
  terminalById(id: String!): TerminalResponse!
  terminalByData(findTerminalDto: FindTerminalDto!): TerminalResponse!
  allTerminalsInAirport(airportId: String!, page: Int, limit: Int): TerminalsResponse!
  getEmployeeById(id: String!): EmployeeResponse!
  getEmployeeByEmail(email: String!): EmployeeResponse!
  getEmployeeByPhone(phone: String!): EmployeeResponse!
  employeesInAirport(airportId: String!, page: Int, limit: Int): EmployeesResponse!
  gateById(id: String!): GateDataResponse!
  gatesByTerminal(terminalId: String!, page: Int, limit: Int): GatesResponse!
  findAirlineById(id: String!): AirlineResponse!
  findAirlineByName(name: String!): AirlineResponse!
  findAllAirlines(page: Int, limit: Int): AirlinesResponse!
  findAllFlightsInAirline(airlineId: String!, page: Int, limit: Int): FlightsInAirlinesResponse!
  getFlightById(id: String!): FlightResponse!
  getFlightByData(findOptions: FlightOptinalInput!): FlightResponse!
  getAllFlightsToAitport(id: String!): FlightsToAirportResponse!
  getAllFlightsFromAitport(id: String!): FlightsFromAirportResponse!
  findSeatById(id: ID!): SeatResponse!
  findAllAvailableSeatsInFlight(findSeatInput: FindSeatInput!, page: Int, limit: Int): SeatsResponse!
  findFlightCrewById(id: String!): FlightCrewResponse!
  findFlightCrewsForFlight(flightId: String!, page: Int, limit: Int): FllghtCrewsResponse!
  getTickets(flightId: String!, page: Float, limit: Float): TicketsResponse!
  getTicketById(id: String!): TicketResponse!
  getAllCheckIns(page: Float, limit: Float): CheckinsResponse!
  getCheckInForUser: CheckinResponse!
  getCheckInById(id: String!): CheckinResponse!
  findBaggageById(id: String!): BaggageResponse!
  findAllBaggageOnFlight(flightId: String!, page: Int, limit: Int): BaggagesResponse!
}

input FindTerminalDto {
  name: String
  airportId: String
}

input FlightOptinalInput {
  flightNumber: String
  status: FlightStatus
  leaveAt: DateTime
  arriveAt: DateTime
}

input FindSeatInput {
  flightId: String!
  class: TicketClass
}

type Mutation {
  register(fcmToken: String!, createUserDto: CreateUserDto!, createPassengerDto: CreatePassengerDto!, createLocationInput: CreateLocationInput!, avatar: CreateImagDto): AuthResponse!
  login(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  forgotPassword: AuthResponse!
  resetPassword(resetPasswordDto: ResetPasswordDto!): UserResponse!
  changePassword(changePasswordDto: ChangePasswordDto!): UserResponse!
  adminLogin(fcmToken: String!, loginDto: LoginDto!): AdminAuthResponse!
  updateUser(updateUserDto: UpdateUserDto!): UserResponse!
  deleteUser: UserResponse!
  updateLocationForUser(updateLocationInput: UpdateLocationInput!): LocationResponse!
  updateLocationForAirline(airlineId: String!, updateLocationInput: UpdateLocationInput!): LocationResponse!
  updateLocationForAirport(airportId: String!, updateLocationInput: UpdateLocationInput!): LocationResponse!
  createAirport(createAirportDto: CreateAirportDto!, createLocationInput: CreateLocationInput!): AirportResponse!
  updateAirport(id: String!, updateAirportDto: UpdateAirportDto!): AirportResponse!
  deleteAirport(id: String!): AirportResponse!
  createTerminal(createTerminalDto: CreateTerminalDto!): TerminalResponse!
  updateTerminal(updateTerminalDto: UpdateTerminalDto!): TerminalResponse!
  deleteTerminal(id: String!): TerminalResponse!
  createEmployee(userId: String!, airportId: String!, role: String!): EmployeeResponse!
  deleteEmployee(id: String!): EmployeeResponse!
  editUserRoleToManager(id: String!): EmployeeResponse!
  editUserRoleInAirport(id: String!, role: String!): EmployeeResponse!
  createGate(createGateDto: CreateGateDto!): GateResponse!
  updateGate(id: String!, gateNumber: String!): GateResponse!
  deleteGate(id: String!): GateResponse!
  createAirline(name: String!, createLocationInput: CreateLocationInput!): AirlineResponse!
  updateAirline(id: String!, name: String!): AirlineResponse!
  deleteAirline(id: String!): AirlineResponse!
  createFlight(createFlightInput: CreateFlightInput!): FlightResponse!
  deleteFlight(id: String!): FlightResponse!
  updateFlight(id: String!, updateFlightInput: FlightOptinalInput!): FlightResponse!
  changeFlightGate(flightId: String!, gateId: String!): FlightResponse!
  cancelFlight(id: String!): FlightResponse!
  delayFlight(id: String!, delayTime: Float!): FlightResponse!
  createSeat(createSeatInput: CreateSeatInput!): SeatResponse!
  bookSeat(id: ID!): SeatResponse!
  unBookSeat(id: ID!): SeatResponse!
  updateSeat(id: ID!, updateSeatInput: UpdateSeatInput!): SeatResponse!
  deleteSeat(id: ID!): SeatResponse!
  createFlightCrew(createFlightCrewInput: CreateFlightCrewInput!): FlightCrewResponse!
  deleteFlightCrew(flightCrewId: String!): FlightCrewResponse!
  deleteTicket(id: String!): TicketResponse!
  createCheckIn(createCheckInInput: CreateCheckInInput!, createTicketInput: CreateTicketInput!, createBagInput: CreateBagInput!, currency: Currency!): CreateCheckinResponse!
  deleteCheckIn(id: String!): CheckinResponse!
  updateBaggage(id: String!, updateBaggageInput: UpdateBaggageInput!): BaggageResponse!
  deleteBaggage(id: String!): BaggageResponse!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  password: String!
}

input CreatePassengerDto {
  passportNumber: Int!
  nationality: String!
  dateOfBirth: DateTime!
}

input CreateLocationInput {
  userId: String
  airportId: String
  airlineId: String
  country: String!
  city: String!
  currency: Currency!
}

input CreateImagDto {
  name: String
  breed: String
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input LoginDto {
  email: String!
  password: String!
}

input ResetPasswordDto {
  token: String!
  password: String!
}

input ChangePasswordDto {
  password: String!
  newPassword: String!
}

input UpdateUserDto {
  firstName: String
  lastName: String
  avatar: CreateImagDto
  email: String
  phone: String
}

input UpdateLocationInput {
  country: String
  city: String
  currency: Currency
}

input CreateAirportDto {
  name: String!
  iataCode: String!
  icaoCode: String!
}

input UpdateAirportDto {
  name: String
  iataCode: String
  icaoCode: String
}

input CreateTerminalDto {
  name: String
  airportId: String
}

input UpdateTerminalDto {
  name: String
  airportId: String
  id: String!
}

input CreateGateDto {
  gateNumber: String!
  terminalId: String!
}

input CreateFlightInput {
  flightNumber: String!
  airlineId: String!
  toAirportId: String!
  fromAirportId: String!
  gateId: String!
  leaveAt: DateTime!
  arriveAt: DateTime!
}

input CreateSeatInput {
  flightId: String!
  seatNumber: Int!
  class: TicketClass!
}

input UpdateSeatInput {
  seatNumber: Int
  class: TicketClass
  isAvailable: Boolean
}

input CreateFlightCrewInput {
  flightId: String!
  employeeId: String!
  role: CrewRole!
}

input CreateCheckInInput {
  price: Int!
  gateId: String!
}

input CreateTicketInput {
  flightId: String!
  seatId: String!
  class: TicketClass!
}

input CreateBagInput {
  weight: Int!
  limit: Int!
}

input UpdateBaggageInput {
  weight: Int
  limit: Int
}