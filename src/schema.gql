# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Terminal {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  airportId: Airport!
  airport: Airport!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Airport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  iataCode: String!
  icaoCode: String!
  city: String!
  country: String!
  employees(page: Int, limit: Int): EmployeesResponse!
  terminals(page: Int, limit: Int): [Terminal!]!
}

type UserOutput {
  id: String!
  firstName: String!
  lastName: String!
  fullName: String!
  phone: String!
  email: String!
  passportNumber: Int!
  nationality: String!
  dateOfBirth: DateTime!
}

type UserResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: UserOutput
}

type AuthOutPut {
  user: UserOutput!
  token: String!
}

type AuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AuthOutPut
}

type PaginationInfo {
  totalPages: Int!
  currentPage: Int!
  totalItems: Int!
}

type EmployeeOutput {
  id: String!
  firstName: String!
  lastName: String!
  fullName: String!
  phone: String!
  email: String!
  role: Role!
}

"""User roles in the system"""
enum Role {
  CREW
  PILOT
  ADMIN
  MANAGER
  PASSENGER
  SECURITY
  GROUND_STAFF
  FLIGHT_ATTENDANT
}

type EmployeeWithAirportInput {
  employee: EmployeeOutput!
  airport: Airport!
}

type EmployeeResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: EmployeeWithAirportInput
}

type EmployeesWithAirportOtput {
  employees: [EmployeeOutput!]!
  airport: Airport!
}

type EmployeesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: EmployeesWithAirportOtput
  pagination: PaginationInfo
}

type AdminAuthOutPut {
  user: EmployeeOutput!
  token: String!
}

type AdminAuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AdminAuthOutPut
}

type AirportsOutput {
  airports: [Airport!]!
}

type AirportsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: AirportsOutput
  pagination: PaginationInfo
}

type AirportOutput {
  airport: Airport!
}

type AirportResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AirportOutput
}

type TerminalResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Terminal
}

type TerminalsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Terminal!]
  pagination: PaginationInfo
}

type Query {
  sayHello: String!
  getUserById(id: String!): UserResponse!
  getUserByEmail(email: String!): UserResponse!
  getUserByphone(phone: String!): UserResponse!
  deleteUser: UserResponse!
  airportById(id: String!): AirportResponse!
  airportByName(name: String!): AirportResponse!
  allAirports(page: Int, limit: Int): AirportsResponse!
  getEmployeeById(id: String!): EmployeeResponse!
  getEmployeeByEmail(email: String!): EmployeeResponse!
  getEmployeeByphone(phone: String!): EmployeeResponse!
  employeesInAirport(airportId: String!, page: Int, limit: Int): EmployeesResponse!
  terminalById(id: String!): TerminalResponse!
  terminalByData(findTerminalDto: FindTerminalDto!): TerminalResponse!
  allTerminalsInAirport(airportId: String!, page: Int, limit: Int): TerminalsResponse!
}

input FindTerminalDto {
  name: String
  airportId: String
}

type Mutation {
  register(fcmToken: String!, createUserDto: CreateUserDto!, createPassengerDto: CreatePassengerDto!, avatar: CreateImagDto): AuthResponse!
  login(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  forgotPassword: AuthResponse!
  resetPassword(resetPasswordDto: ResetPasswordDto!): UserResponse!
  changePassword(changePasswordDto: ChangePasswordDto!): UserResponse!
  adminLogin(fcmToken: String!, loginDto: LoginDto!): AdminAuthResponse!
  updateUser(updateUserDto: UpdateUserDto!): UserResponse!
  createAirport(createAirportDto: CreateAirportDto!): AirportResponse!
  updateAirport(id: String!, updateAirportDto: UpdateAirportDto!): AirportResponse!
  deleteAirport(id: String!): AirportResponse!
  createEmployee(userId: String!, airportId: String!, role: String!): EmployeeResponse!
  deleteEmployee: EmployeeResponse!
  UpdateEmployeeRoleToAdmin(id: String!): EmployeeResponse!
  UpdateEmployeeRoleInairport(id: String!, role: String!): EmployeeResponse!
  createTerminal(createTerminalDto: CreateTerminalDto!): TerminalResponse!
  updateTerminal(updateTerminalDto: UpdateTerminalDto!): TerminalResponse!
  deleteTerminal(id: String!): TerminalResponse!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  password: String!
}

input CreatePassengerDto {
  passportNumber: Int!
  nationality: String!
  dateOfBirth: DateTime!
}

input CreateImagDto {
  name: String
  breed: String
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input LoginDto {
  email: String!
  password: String!
}

input ResetPasswordDto {
  token: String!
  password: String!
}

input ChangePasswordDto {
  password: String!
  newPassword: String!
}

input UpdateUserDto {
  firstName: String
  lastName: String
  avatar: CreateImagDto
  email: String
  phone: String
}

input CreateAirportDto {
  name: String!
  iataCode: String!
  icaoCode: String!
  city: String!
  country: String!
}

input UpdateAirportDto {
  name: String
  iataCode: String
  icaoCode: String
  city: String
  country: String
}

input CreateTerminalDto {
  name: String
  airportId: String
}

input UpdateTerminalDto {
  name: String
  airportId: String
  id: String!
}